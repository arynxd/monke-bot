/*
 * This file is generated by jOOQ.
 */
package org.igsq.igsqbot.entities.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import org.igsq.igsqbot.entities.jooq.Keys;
import org.igsq.igsqbot.entities.jooq.Public;
import org.igsq.igsqbot.entities.jooq.tables.records.ReportsRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Reports extends TableImpl<ReportsRecord>
{

	/**
	 * The reference instance of <code>public.reports</code>
	 */
	public static final Reports REPORTS = new Reports();
	private static final long serialVersionUID = 1L;
	/**
	 * The column <code>public.reports.id</code>.
	 */
	public final TableField<ReportsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");
	/**
	 * The column <code>public.reports.message_id</code>.
	 */
	public final TableField<ReportsRecord, Long> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.BIGINT.nullable(false), this, "");
	/**
	 * The column <code>public.reports.report_message_id</code>.
	 */
	public final TableField<ReportsRecord, Long> REPORT_MESSAGE_ID = createField(DSL.name("report_message_id"), SQLDataType.BIGINT.nullable(false), this, "");
	/**
	 * The column <code>public.reports.channel_id</code>.
	 */
	public final TableField<ReportsRecord, Long> CHANNEL_ID = createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "");
	/**
	 * The column <code>public.reports.guild_id</code>.
	 */
	public final TableField<ReportsRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");
	/**
	 * The column <code>public.reports.reporter_id</code>.
	 */
	public final TableField<ReportsRecord, Long> REPORTER_ID = createField(DSL.name("reporter_id"), SQLDataType.BIGINT.nullable(false), this, "");
	/**
	 * The column <code>public.reports.reporttee_id</code>.
	 */
	public final TableField<ReportsRecord, Long> REPORTTEE_ID = createField(DSL.name("reporttee_id"), SQLDataType.BIGINT.nullable(false), this, "");
	/**
	 * The column <code>public.reports.timestamp</code>.
	 */
	public final TableField<ReportsRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");
	/**
	 * The column <code>public.reports.report_text</code>.
	 */
	public final TableField<ReportsRecord, String> REPORT_TEXT = createField(DSL.name("report_text"), SQLDataType.CLOB.nullable(false), this, "");

	private Reports(Name alias, Table<ReportsRecord> aliased)
	{
		this(alias, aliased, null);
	}

	private Reports(Name alias, Table<ReportsRecord> aliased, Field<?>[] parameters)
	{
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>public.reports</code> table reference
	 */
	public Reports(String alias)
	{
		this(DSL.name(alias), REPORTS);
	}

	/**
	 * Create an aliased <code>public.reports</code> table reference
	 */
	public Reports(Name alias)
	{
		this(alias, REPORTS);
	}

	/**
	 * Create a <code>public.reports</code> table reference
	 */
	public Reports()
	{
		this(DSL.name("reports"), null);
	}

	public <O extends Record> Reports(Table<O> child, ForeignKey<O, ReportsRecord> key)
	{
		super(child, key, REPORTS);
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ReportsRecord> getRecordType()
	{
		return ReportsRecord.class;
	}

	@Override
	public Schema getSchema()
	{
		return Public.PUBLIC;
	}

	@Override
	public Identity<ReportsRecord, Long> getIdentity()
	{
		return (Identity<ReportsRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<ReportsRecord> getPrimaryKey()
	{
		return Keys.REPORTS_PKEY;
	}

	@Override
	public List<UniqueKey<ReportsRecord>> getKeys()
	{
		return Arrays.<UniqueKey<ReportsRecord>>asList(Keys.REPORTS_PKEY, Keys.REPORTS_MESSAGE_ID_KEY, Keys.REPORTS_REPORT_MESSAGE_ID_KEY);
	}

	@Override
	public Reports as(String alias)
	{
		return new Reports(DSL.name(alias), this);
	}

	@Override
	public Reports as(Name alias)
	{
		return new Reports(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Reports rename(String name)
	{
		return new Reports(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Reports rename(Name name)
	{
		return new Reports(name, null);
	}

	// -------------------------------------------------------------------------
	// Row9 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row9<Long, Long, Long, Long, Long, Long, Long, LocalDateTime, String> fieldsRow()
	{
		return (Row9) super.fieldsRow();
	}
}
